/*
Copyright 2022 The containerd Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoadImageRequest struct {
	// FilePath is the absolute path of docker image tarball.
	FilePath             string   `protobuf:"bytes,1,opt,name=FilePath,json=filePath,proto3" json:"FilePath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadImageRequest) Reset()      { *m = LoadImageRequest{} }
func (*LoadImageRequest) ProtoMessage() {}
func (*LoadImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *LoadImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadImageRequest.Merge(m, src)
}
func (m *LoadImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoadImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadImageRequest proto.InternalMessageInfo

func (m *LoadImageRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type LoadImageResponse struct {
	// Images have been loaded.
	Images               []string `protobuf:"bytes,1,rep,name=Images,json=images,proto3" json:"Images,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadImageResponse) Reset()      { *m = LoadImageResponse{} }
func (*LoadImageResponse) ProtoMessage() {}
func (*LoadImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *LoadImageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadImageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadImageResponse.Merge(m, src)
}
func (m *LoadImageResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoadImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadImageResponse proto.InternalMessageInfo

func (m *LoadImageResponse) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

type ResetPodSandboxRequest struct {
	// ID of the PodSandbox to reset.
	PodSandboxId         string   `protobuf:"bytes,1,opt,name=pod_sandbox_id,json=podSandboxId,proto3" json:"pod_sandbox_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetPodSandboxRequest) Reset()      { *m = ResetPodSandboxRequest{} }
func (*ResetPodSandboxRequest) ProtoMessage() {}
func (*ResetPodSandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ResetPodSandboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPodSandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPodSandboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPodSandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPodSandboxRequest.Merge(m, src)
}
func (m *ResetPodSandboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResetPodSandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPodSandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPodSandboxRequest proto.InternalMessageInfo

func (m *ResetPodSandboxRequest) GetPodSandboxId() string {
	if m != nil {
		return m.PodSandboxId
	}
	return ""
}

type ResetPodSandboxResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetPodSandboxResponse) Reset()      { *m = ResetPodSandboxResponse{} }
func (*ResetPodSandboxResponse) ProtoMessage() {}
func (*ResetPodSandboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ResetPodSandboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPodSandboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPodSandboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPodSandboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPodSandboxResponse.Merge(m, src)
}
func (m *ResetPodSandboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResetPodSandboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPodSandboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPodSandboxResponse proto.InternalMessageInfo

type ResetContainerRequest struct {
	// ID of the container to reset.
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetContainerRequest) Reset()      { *m = ResetContainerRequest{} }
func (*ResetContainerRequest) ProtoMessage() {}
func (*ResetContainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *ResetContainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetContainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetContainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetContainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetContainerRequest.Merge(m, src)
}
func (m *ResetContainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResetContainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetContainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetContainerRequest proto.InternalMessageInfo

func (m *ResetContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type ResetContainerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetContainerResponse) Reset()      { *m = ResetContainerResponse{} }
func (*ResetContainerResponse) ProtoMessage() {}
func (*ResetContainerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *ResetContainerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetContainerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetContainerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetContainerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetContainerResponse.Merge(m, src)
}
func (m *ResetContainerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResetContainerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetContainerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetContainerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LoadImageRequest)(nil), "api.v1.LoadImageRequest")
	proto.RegisterType((*LoadImageResponse)(nil), "api.v1.LoadImageResponse")
	proto.RegisterType((*ResetPodSandboxRequest)(nil), "api.v1.ResetPodSandboxRequest")
	proto.RegisterType((*ResetPodSandboxResponse)(nil), "api.v1.ResetPodSandboxResponse")
	proto.RegisterType((*ResetContainerRequest)(nil), "api.v1.ResetContainerRequest")
	proto.RegisterType((*ResetContainerResponse)(nil), "api.v1.ResetContainerResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0x65, 0xf3, 0x4b, 0x1a, 0x3a, 0x3f, 0x82, 0xb8, 0x89, 0x58, 0x1a, 0x5d, 0xb1, 0xf1, 0x40,
	0x62, 0x2c, 0x51, 0x6f, 0x1e, 0x3c, 0x40, 0x62, 0xd2, 0xc4, 0x03, 0x16, 0xef, 0xa4, 0x65, 0x97,
	0xb2, 0x09, 0x74, 0x2b, 0x6d, 0x89, 0x47, 0x3f, 0x82, 0x1f, 0x8b, 0xa3, 0x47, 0x8f, 0x52, 0x3f,
	0x88, 0xc6, 0xed, 0x1f, 0x01, 0xe1, 0xb6, 0xf3, 0xde, 0xbc, 0x37, 0x33, 0x2f, 0x0b, 0xaa, 0x13,
	0x70, 0x33, 0x98, 0x89, 0x48, 0x60, 0xe5, 0xe7, 0x39, 0xbf, 0xd4, 0x2f, 0x3c, 0x1e, 0x8d, 0x63,
	0xd7, 0x1c, 0x8a, 0x69, 0xdb, 0x13, 0x9e, 0x68, 0x4b, 0xda, 0x8d, 0x47, 0xb2, 0x92, 0x85, 0x7c,
	0xa5, 0x32, 0xc3, 0x84, 0xda, 0xbd, 0x70, 0xa8, 0x35, 0x75, 0x3c, 0x66, 0xb3, 0xa7, 0x98, 0x85,
	0x11, 0xd6, 0xa1, 0x7c, 0xc7, 0x27, 0xac, 0xe7, 0x44, 0x63, 0x0d, 0x35, 0x51, 0x4b, 0xb5, 0xcb,
	0xa3, 0xac, 0x36, 0xce, 0x61, 0x7f, 0xa5, 0x3f, 0x0c, 0x84, 0x1f, 0x32, 0x5c, 0x07, 0x45, 0x02,
	0xa1, 0x86, 0x9a, 0xff, 0x5a, 0xaa, 0xad, 0x70, 0x59, 0x19, 0xb7, 0x50, 0xb7, 0x59, 0xc8, 0xa2,
	0x9e, 0xa0, 0x7d, 0xc7, 0xa7, 0xae, 0x78, 0xce, 0x47, 0x9c, 0x41, 0x35, 0x10, 0x74, 0x10, 0xa6,
	0xe8, 0x80, 0xd3, 0x6c, 0x50, 0x25, 0x28, 0x5a, 0x2d, 0x6a, 0x34, 0xe0, 0xf0, 0x8f, 0x3e, 0x1d,
	0x69, 0xdc, 0xc0, 0x81, 0xa4, 0xba, 0xc2, 0x8f, 0x1c, 0xee, 0xb3, 0x59, 0xee, 0x7c, 0x0a, 0x95,
	0x61, 0x8e, 0xfd, 0xfa, 0xfe, 0x2f, 0x30, 0x8b, 0x1a, 0x5a, 0xb6, 0xd6, 0x8a, 0x36, 0x75, 0xbd,
	0xfa, 0x42, 0x50, 0xeb, 0xda, 0x56, 0x6f, 0x12, 0x7b, 0xdc, 0xef, 0xb3, 0xd9, 0x9c, 0x0f, 0x19,
	0xee, 0x80, 0x5a, 0x9c, 0x8c, 0x35, 0x33, 0xcd, 0xd9, 0xdc, 0x4c, 0x4d, 0x6f, 0x6c, 0x61, 0xb2,
	0x65, 0x4b, 0xf8, 0x11, 0xf6, 0x36, 0x2e, 0xc1, 0x24, 0xef, 0xdf, 0x1e, 0x91, 0x7e, 0xb2, 0x93,
	0x2f, 0x5c, 0x1f, 0xa0, 0xba, 0x7e, 0x08, 0x3e, 0x5e, 0x13, 0x6d, 0x86, 0xa3, 0x93, 0x5d, 0x74,
	0x6e, 0xd9, 0x39, 0x5a, 0x2c, 0x09, 0x7a, 0x5f, 0x92, 0xd2, 0x4b, 0x42, 0xd0, 0x22, 0x21, 0xe8,
	0x2d, 0x21, 0xe8, 0x23, 0x21, 0xe8, 0xf5, 0x93, 0x94, 0x5c, 0x45, 0x7e, 0x9a, 0xeb, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x20, 0xc9, 0x13, 0xe5, 0x78, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CRIPluginServiceClient is the client API for CRIPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CRIPluginServiceClient interface {
	// LoadImage loads a image into containerd.
	LoadImage(ctx context.Context, in *LoadImageRequest, opts ...grpc.CallOption) (*LoadImageResponse, error)
	// ResetPodSandbox resets the state of a sandbox and any containers that are part of the
	// sandbox, recreating previously allocated resources (such as namespaces) that were freed
	// on stop, and retaining other resources.
	// This call is idempotent if the sandbox is in the ready state.
	ResetPodSandbox(ctx context.Context, in *ResetPodSandboxRequest, opts ...grpc.CallOption) (*ResetPodSandboxResponse, error)
	// ResetContainer resets a stopped container back to the created state, keeping
	// its scratch space untouched.
	// This call is idempotent, and must not return an error if the container is already
	// in the created state.
	ResetContainer(ctx context.Context, in *ResetContainerRequest, opts ...grpc.CallOption) (*ResetContainerResponse, error)
}

type cRIPluginServiceClient struct {
	cc *grpc.ClientConn
}

func NewCRIPluginServiceClient(cc *grpc.ClientConn) CRIPluginServiceClient {
	return &cRIPluginServiceClient{cc}
}

func (c *cRIPluginServiceClient) LoadImage(ctx context.Context, in *LoadImageRequest, opts ...grpc.CallOption) (*LoadImageResponse, error) {
	out := new(LoadImageResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CRIPluginService/LoadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRIPluginServiceClient) ResetPodSandbox(ctx context.Context, in *ResetPodSandboxRequest, opts ...grpc.CallOption) (*ResetPodSandboxResponse, error) {
	out := new(ResetPodSandboxResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CRIPluginService/ResetPodSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRIPluginServiceClient) ResetContainer(ctx context.Context, in *ResetContainerRequest, opts ...grpc.CallOption) (*ResetContainerResponse, error) {
	out := new(ResetContainerResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CRIPluginService/ResetContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRIPluginServiceServer is the server API for CRIPluginService service.
type CRIPluginServiceServer interface {
	// LoadImage loads a image into containerd.
	LoadImage(context.Context, *LoadImageRequest) (*LoadImageResponse, error)
	// ResetPodSandbox resets the state of a sandbox and any containers that are part of the
	// sandbox, recreating previously allocated resources (such as namespaces) that were freed
	// on stop, and retaining other resources.
	// This call is idempotent if the sandbox is in the ready state.
	ResetPodSandbox(context.Context, *ResetPodSandboxRequest) (*ResetPodSandboxResponse, error)
	// ResetContainer resets a stopped container back to the created state, keeping
	// its scratch space untouched.
	// This call is idempotent, and must not return an error if the container is already
	// in the created state.
	ResetContainer(context.Context, *ResetContainerRequest) (*ResetContainerResponse, error)
}

// UnimplementedCRIPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCRIPluginServiceServer struct {
}

func (*UnimplementedCRIPluginServiceServer) LoadImage(ctx context.Context, req *LoadImageRequest) (*LoadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadImage not implemented")
}
func (*UnimplementedCRIPluginServiceServer) ResetPodSandbox(ctx context.Context, req *ResetPodSandboxRequest) (*ResetPodSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPodSandbox not implemented")
}
func (*UnimplementedCRIPluginServiceServer) ResetContainer(ctx context.Context, req *ResetContainerRequest) (*ResetContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetContainer not implemented")
}

func RegisterCRIPluginServiceServer(s *grpc.Server, srv CRIPluginServiceServer) {
	s.RegisterService(&_CRIPluginService_serviceDesc, srv)
}

func _CRIPluginService_LoadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRIPluginServiceServer).LoadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CRIPluginService/LoadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRIPluginServiceServer).LoadImage(ctx, req.(*LoadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRIPluginService_ResetPodSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPodSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRIPluginServiceServer).ResetPodSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CRIPluginService/ResetPodSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRIPluginServiceServer).ResetPodSandbox(ctx, req.(*ResetPodSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRIPluginService_ResetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRIPluginServiceServer).ResetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CRIPluginService/ResetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRIPluginServiceServer).ResetContainer(ctx, req.(*ResetContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CRIPluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.CRIPluginService",
	HandlerType: (*CRIPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadImage",
			Handler:    _CRIPluginService_LoadImage_Handler,
		},
		{
			MethodName: "ResetPodSandbox",
			Handler:    _CRIPluginService_ResetPodSandbox_Handler,
		},
		{
			MethodName: "ResetContainer",
			Handler:    _CRIPluginService_ResetContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *LoadImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadImageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadImageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadImageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResetPodSandboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPodSandboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPodSandboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodSandboxId) > 0 {
		i -= len(m.PodSandboxId)
		copy(dAtA[i:], m.PodSandboxId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PodSandboxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetPodSandboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPodSandboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPodSandboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResetContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetContainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetContainerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetContainerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetContainerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoadImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *LoadImageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ResetPodSandboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodSandboxId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResetPodSandboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResetContainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResetContainerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoadImageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadImageRequest{`,
		`FilePath:` + fmt.Sprintf("%v", this.FilePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadImageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadImageResponse{`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetPodSandboxRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetPodSandboxRequest{`,
		`PodSandboxId:` + fmt.Sprintf("%v", this.PodSandboxId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetPodSandboxResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetPodSandboxResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ResetContainerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetContainerRequest{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetContainerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetContainerResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoadImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadImageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadImageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadImageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPodSandboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPodSandboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPodSandboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSandboxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodSandboxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPodSandboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPodSandboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPodSandboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetContainerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetContainerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetContainerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
